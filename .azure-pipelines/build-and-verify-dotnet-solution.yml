# For more information on parameters see https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops#parameters
parameters:
- name: solutionName
  type: string
- name: dotNetVersion
  type: string
  default: 5.0.x
- name: buildConfiguration
  type: string
  default: Release
  values:
    - Debug
    - Release

steps:
# It's possible to use template expressions to validate if a parameter is empty or whitespace and fail the pipeline.
# For more information on template expressions see https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops#template-expressions
- ${{ if eq(replace(parameters.solutionName, ' ', ''), '') }}:
  - script: |
      echo "##vso[task.logissue type=error;]Template parameter \"solutionName\" can not be empty or whitespace"
      echo "##vso[task.complete result=Failed;]"
    displayName: Fail if solutionName is empty or whitespace

# Use this task to acquire a specific version of .NET Core from the Internet or the tools cache and add it to the PATH.
# You can also use this task to change the version of .NET Core used in subsequent tasks like .NET Core cli task.
# One other reason to use tool installer is if you want to decouple your pipeline from our update cycles
# to help avoid a pipeline run being broken due to a change we make to our agent software.
# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/tool/dotnet-core-tool-installer?view=azure-devops
- task: UseDotNet@2
  displayName: Use .NET Core sdk ${{ parameters.dotNetVersion }}
  inputs:
    packageType: sdk
    version: ${{ parameters.dotNetVersion }}
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: DotNetCoreCLI@2
  displayName: Restore NuGet Packages
  inputs:
    command: restore
    projects: 'src/${{ parameters.solutionName }}.sln'
    includeNuGetOrg: true
    
- task: DotNetCoreCLI@2
  displayName: Build Solution
  inputs:
    command: build
    projects: 'src/${{ parameters.solutionName }}.sln'
    arguments: '--configuration ${{ parameters.buildConfiguration }}'

- task: DotNetCoreCLI@2
  displayName: Run Tests
  inputs:
    command: test
    publishTestResults: false
    projects: |
      'src/**/*[Tt]ests.csproj'
      'src/**/*Specs.csproj'
    arguments: '--configuration ${{ parameters.buildConfiguration }} --logger trx --results-directory "$(Agent.TempDirectory)/TestResults/${{ parameters.solutionName }}" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="$(Agent.TempDirectory)/TestResults/${{ parameters.solutionName }}/Coverage"  --collect:"Code Coverage"'